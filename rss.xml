<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Insanely Reasonable, Reasonably Insane</title>
    <link>http://huyingjie.github.io/blog-hexo-en-yingjiehu/</link>
    <atom:link href="/rss.xml" rel="self" type="application/rss+xml"/>
    
    <description>statistics / data science / data analysis / big data</description>
    <pubDate>Tue, 05 Dec 2017 02:19:35 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>100 Days Of Code Round 1 (R, data analysis)</title>
      <link>http://huyingjie.github.io/blog-hexo-en-yingjiehu/100-Days-Of-Code-Round-1-R-data-analysis/</link>
      <guid>http://huyingjie.github.io/blog-hexo-en-yingjiehu/100-Days-Of-Code-Round-1-R-data-analysis/</guid>
      <pubDate>Mon, 04 Dec 2017 22:09:09 GMT</pubDate>
      <description>
      
        &lt;p&gt;A companion project to &lt;a href=&quot;100-Days-Of-Reading-Paper-Round-1&quot;&gt;100 Days of Reading Paper&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Main Commitment: I will code to do data analysis for at least an hour every day for the next 100 days.&lt;/p&gt;
&lt;p&gt;Start Date: 2017-12-05&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>A companion project to <a href="100-Days-Of-Reading-Paper-Round-1">100 Days of Reading Paper</a>.</p><p>Main Commitment: I will code to do data analysis for at least an hour every day for the next 100 days.</p><p>Start Date: 2017-12-05<br><a id="more"></a></p><p>Reference: <a href="https://medium.freecodecamp.org/how-to-effectively-scope-your-software-projects-from-planning-to-execution-e96cbcac54b9" target="_blank" rel="noopener">How to effectively scope your software projects from planning to execution</a></p><h2 id="Rules"><a href="#Rules" class="headerlink" title="Rules"></a>Rules</h2><ol><li>I will code using R or do data analysis using other software for at least an hour every day.</li><li>I will tweet my progress every day, with the hashtag <code>#100DaysOfCode</code> and <code>#100DaysOfDataScience</code> and note which day of the challenge I’m on.</li><li>I will track my progress here and push to GitHub.</li><li>If I code as part of my job, I will not count that time towards the challenge.</li><li>I will only count the days where I spend at least some of my time building projects — not the days where I spend all my coding time working through lessons and tutorials. (If you’re new to coding, Free Code Camp’s curriculum quickly ramps up to building projects, and you will have built dozens of projects by the time you finish it).</li><li><p>I will encourage and support at least first two people each day in the <code>#100DaysOfCode</code> challenge on Twitter. I can read at most 5 tweets about <code>#100DaysOfCode</code> each day. Less is more. Don’t spend more than enough time on the social networking website.</p><p> 3 Options</p><ul><li>Like tweets</li><li>Leave a comment</li><li>(optional) Looking at their projects and giving them feedback (no more than 10 minutes per day)</li></ul></li><li>I will only skip a day if something important comes up. And when I resume, I won’t count the day I skipped as one of my 100 days.</li><li>Working on competitions like Kaggle will definitely be counted towards the challenge.</li></ol><p>Note: Projects from dissertation do not belong to <code>work</code> mentioned above.</p><h2 id="Some-important-additional-considerations"><a href="#Some-important-additional-considerations" class="headerlink" title="Some important additional considerations"></a>Some important additional considerations</h2><ul><li>If you can, try not to use tutorials, but build real projects — they can range from simple pages to full-fledged web apps.</li><li>Don’t skip two days in a row, and try not to skip more than 1 day in 2 weeks.</li></ul><p>The projects that you’ll build will be small in scope, so by the time you finish, you’ll have completed several of them — and gained a wide range of experience.</p><h2 id="The-planning-phase"><a href="#The-planning-phase" class="headerlink" title="The planning phase"></a>The planning phase</h2><ul><li><p>Define very specific goals for the project</p><p>  example: improve X by adding unit tests, supporting 20K queries per second, and reducing capped mean of user latency to &lt;= 200ms</p></li><li><p>Explicitly define anti-goals, and separating must-haves and nice-to-haves.</p></li><li><p>Minimize the batch size of the project by</p><ol><li>set up clear milestones and checkpoints for the project</li><li><p>make it easy to launch only part of the project. </p><p> Not only does this help break down the project, but it will also allow the team to pause or cut the project early if another, higher priority task comes up.</p></li></ol></li><li><p>De-risk the project as soon as possible. </p><p>  Two common ways of de-risking a project include</p><ol><li>working on the riskiest parts upfront</li><li><p>prototyping the riskiest parts using dummy data and/or scaffolding. </p><p>Whenever a new open-source system or external service is used, that usually represents a big risk.</p></li></ol></li><li><p>Don’t optimize for the total amount of work done. Instead, optimize for the total amount of impact over time. Once you’ve gotten the riskiest part out of the way, prioritize working on the part of the project that would result in the highest amount of impact immediately.</p><p>  Here’s one way to think about this: plot the impact of a project over time, where the Y-axis is impact, and the X axis is time. At the start of the project, the impact is 0%, and at the end of the project, the impact is 100%. You want to maximize the area under the curve by doing high ROI tasks first.</p></li><li><p>Try to avoid rewriting big systems from scratch as much as possible. When doing a rewrite, we tend to </p><ol><li>underestimate how much work it would be</li><li>be tempted to add new features and improvements</li><li><p>build an overly complicated system because we are too focused on all the shortcomings of the first system.</p><p>Instead of doing a big rewrite, consider incrementally replacing subsystems. Have good abstraction layers that support swapping out one part of the old system at a time, so you don’t need to wait for everything to be done to test the new system.</p></li></ol></li></ul><h2 id="The-scoping-phase"><a href="#The-scoping-phase" class="headerlink" title="The scoping phase"></a>The scoping phase</h2><ol><li>Divide the project into small tasks, <strong>each taking two days or less</strong>. </li><li>Define measurable milestones to get to the project goal. Schedule each with a specific calendar date representing when you expect this milestone to be reached. Then, establish some sort of external accountability on these milestones by, for example, committing them to your manager and setting up milestone check-ins.</li><li>Think of project time estimates as probability distributions, not best-case scenarios. Instead of telling someone that a feature will be finished in 6 weeks, tell them something like “there’s a 50% likelihood of finishing the feature in 4 weeks, and a 90% chance we’d finish it in 8 weeks.” This tends to force people to be more realistic.</li><li>Add buffer to account for: (1) Dev time != calendar time, due to meetings, interviews, and holidays. I usually multiply the dev time by 1.5 to get to the calendar time. (2) Unexpected project tasks time, since there are always tasks that you didn’t realize you need to do until much later. These tasks could include refactoring old code, debugging strange behaviors, or adding tests. The more experienced you are at scoping, the smaller this multiplier will get.</li><li>Resist the temptation to under-scope. Be honest about how long tasks will take, not how long you or someone else (such as your manager or the Go To Market team) wants them to take.</li><li>Use historical data. Keep track of whether you’ve tended to over scope or under scope projects in the past (most people tend to under scope). Adjust your scoping accordingly.</li><li>Consider timeboxing open-ended parts of the project. Instead of “find the best stream processing framework for this system,” which can take months of research and prototyping, timebox it to “find a suitable streaming processing framework in a week.” Use your judgment here to balance this against incurring long-term operational overhead.</li></ol><h2 id="The-execution-phase"><a href="#The-execution-phase" class="headerlink" title="The execution phase"></a>The execution phase</h2><ul><li><p>Re-scope regularly during the project execution. </p><p>  For each task, track how much time you estimated the task would take, then how long it actually took you to complete it. </p><p>  Do this for every measurable milestone. </p><p>  If your scoping is off by 50% for the first parts of the project, odds are your scoping will also be off by 50% for the rest of the project.</p></li><li><p>Use milestones to answer “how’s the project going?” </p><p>  As engineers, it’s tempting to answer “it’ll be done by next week” or “until end of this month.” But these types of vague answers tend to create projects that are always 2 weeks away from being finished. Instead, use the (re-scoped) milestones to give a concrete answer based on how much work is left.</p></li></ul><h2 id="Template-for-Log"><a href="#Template-for-Log" class="headerlink" title="Template for Log"></a>Template for Log</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">### Day : </span><br><span class="line">**Today&apos;s Progress (achievements and frustrations)**: </span><br><span class="line">**Thoughts and Emotions**</span><br><span class="line">**Github Repo**:</span><br></pre></td></tr></table></figure><h2 id="LOG"><a href="#LOG" class="headerlink" title="LOG"></a>LOG</h2><h3 id="Day"><a href="#Day" class="headerlink" title="Day :"></a>Day :</h3><p><strong>Today’s Progress (achievements and frustrations)</strong>:<br><strong>Thoughts and Emotions</strong><br><strong>Github Repo</strong>: </p>]]></content:encoded>
      
      <comments>http://huyingjie.github.io/blog-hexo-en-yingjiehu/100-Days-Of-Code-Round-1-R-data-analysis/#disqus_thread</comments>
    </item>
    
    <item>
      <title>100 Days Of Reading Paper Round 1</title>
      <link>http://huyingjie.github.io/blog-hexo-en-yingjiehu/100-Days-Of-Reading-Paper-Round-1/</link>
      <guid>http://huyingjie.github.io/blog-hexo-en-yingjiehu/100-Days-Of-Reading-Paper-Round-1/</guid>
      <pubDate>Mon, 04 Dec 2017 05:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;The supporting project is &lt;a href=&quot;100-Days-Of-Code-Round-1-R-data-analysis&quot;&gt;100 Days Of Code Round 1 (R, data analysis)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Main Commitment: I will read paper for at least an hour every day for the next 100 days.&lt;/p&gt;
&lt;p&gt;Start Date: 2017-12-05&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>The supporting project is <a href="100-Days-Of-Code-Round-1-R-data-analysis">100 Days Of Code Round 1 (R, data analysis)</a></p><p>Main Commitment: I will read paper for at least an hour every day for the next 100 days.</p><p>Start Date: 2017-12-05<br><a id="more"></a></p><p>Reference: <a href="https://medium.freecodecamp.org/how-to-effectively-scope-your-software-projects-from-planning-to-execution-e96cbcac54b9" target="_blank" rel="noopener">How to effectively scope your software projects from planning to execution</a></p><h2 id="Rules"><a href="#Rules" class="headerlink" title="Rules"></a>Rules</h2><ol><li>I will read paper for at least an hour every day.</li><li>I will tweet my progress every day, with the hashtag <code>#100DaysOfReadingPaper</code> and note which day of the challenge I’m on.</li><li>I will track my progress here and push to GitHub.</li><li>If I read as part of my job, I will count that time towards the challenge.</li><li>I will only skip a day if something important comes up. And when I resume, I won’t count the day I skipped as one of my 100 days.</li></ol><h2 id="Some-important-additional-considerations"><a href="#Some-important-additional-considerations" class="headerlink" title="Some important additional considerations"></a>Some important additional considerations</h2><ul><li>Don’t skip two days in a row, and try not to skip more than 1 day in 2 weeks.</li></ul><h2 id="Template-for-Log"><a href="#Template-for-Log" class="headerlink" title="Template for Log"></a>Template for Log</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">### Day : </span><br><span class="line">**Today&apos;s Progress (achievements and frustrations)**: </span><br><span class="line">**Thoughts and Emotions**</span><br><span class="line">**Github Repo**:</span><br></pre></td></tr></table></figure><h2 id="LOG"><a href="#LOG" class="headerlink" title="LOG"></a>LOG</h2><h3 id="Day"><a href="#Day" class="headerlink" title="Day :"></a>Day :</h3><p><strong>Today’s Progress (achievements and frustrations)</strong>:<br><strong>Thoughts and Emotions</strong><br><strong>Github Repo</strong>: </p>]]></content:encoded>
      
      <comments>http://huyingjie.github.io/blog-hexo-en-yingjiehu/100-Days-Of-Reading-Paper-Round-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Add disqus comment system in Jekyll</title>
      <link>http://huyingjie.github.io/blog-hexo-en-yingjiehu/Add-disqus-comment-system-in-Jekyll/</link>
      <guid>http://huyingjie.github.io/blog-hexo-en-yingjiehu/Add-disqus-comment-system-in-Jekyll/</guid>
      <pubDate>Mon, 06 Feb 2017 05:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;The following steps are to add disqus comment system in all posts. It requires global setting in the &lt;code&gt;_config.yml&lt;/code&gt; file. In comparison, the official disqus tutorial adds front matter to each post to indicate whether comments are shown or not.
      
      </description>
      
      <content:encoded><![CDATA[<p>The following steps are to add disqus comment system in all posts. It requires global setting in the <code>_config.yml</code> file. In comparison, the official disqus tutorial adds front matter to each post to indicate whether comments are shown or not. <a id="more"></a></p><ol><li><p>Add following codes to the <code>_config.yml</code> file:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Disqus settings</span><br><span class="line">disqus_username: DISQUSNAME</span><br><span class="line">layout: default</span><br><span class="line">comments: true</span><br></pre></td></tr></table></figure></li><li><p>Click the  <code>Universal Embeded Code</code> text in the <code>Jekyll install instructions</code> page in disqus website.</p></li><li><p>Copy codes in the first step on the page.</p></li><li>Open and edit <code>post.html</code> below the <code>_layouts</code> folder.</li><li>Find the place where you will put comments.</li><li>Paste codes from Step 3.</li></ol>]]></content:encoded>
      
      <comments>http://huyingjie.github.io/blog-hexo-en-yingjiehu/Add-disqus-comment-system-in-Jekyll/#disqus_thread</comments>
    </item>
    
    <item>
      <title>How to show math formula in Jekyll</title>
      <link>http://huyingjie.github.io/blog-hexo-en-yingjiehu/Show-math-formula-in-Jekyll/</link>
      <guid>http://huyingjie.github.io/blog-hexo-en-yingjiehu/Show-math-formula-in-Jekyll/</guid>
      <pubDate>Sun, 05 Feb 2017 05:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;There are only two steps to add functionality of showing math formular in Jekyll. MathJax is the engine to achive it.
      
      </description>
      
      <content:encoded><![CDATA[<p>There are only two steps to add functionality of showing math formular in Jekyll. MathJax is the engine to achive it. <a id="more"></a></p><ol><li>open the file <code>default.html</code> in the folder <code>_layouts</code></li><li>add the following codes before `</li></ol><pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/x-mathjax-config"</span>&gt;</span><br><span class="line">MathJax.Hub.Config(&#123;<span class="attr">tex2jax</span>: &#123;<span class="attr">inlineMath</span>: [[<span class="string">'$'</span>,<span class="string">'$'</span>], [<span class="string">'\\('</span>,<span class="string">'\\)'</span>]]&#125;&#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">" src="</span>http:<span class="comment">//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"&gt;&lt;/script&gt;</span></span><br><span class="line">&lt;link href=<span class="string">"/assets/css/syntax.css"</span> rel=<span class="string">"stylesheet"</span> &gt;</span><br></pre></td></tr></table></figure></code></pre><h2 id="Test"><a href="#Test" class="headerlink" title="Test:"></a>Test:</h2><p>Add the following codes to your posts to test whether MathJax is working.</p><ol><li><p>the <strong>inline</strong> mode</p><p> <strong>Code:</strong></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In physics, the mass-energy equivalence is stated</span><br><span class="line">by the equation $E=mc^2$, discovered in 1905 by Albert Einstein.</span><br></pre></td></tr></table></figure><p> <strong>Desired result:</strong></p><p> In physics, the mass-energy equivalence is stated<br>by the equation $E=mc^2$, discovered in 1905 by Albert Einstein.</p></li><li><p>the <strong>display</strong> mode</p><p> <strong>Code:</strong></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">The mass-energy equivalence is described by the famous equation</span><br><span class="line"></span><br><span class="line">$$E=mc^2$$</span><br><span class="line"></span><br><span class="line">discovered in 1905 by Albert Einstein.</span><br><span class="line">In natural units ($c$ = 1), the formula expresses the identity</span><br><span class="line"></span><br><span class="line">\begin&#123;equation&#125;</span><br><span class="line">E=m</span><br><span class="line">\end&#123;equation&#125;</span><br></pre></td></tr></table></figure><p> <strong>Desired result:</strong></p><p> The mass-energy equivalence is described by the famous equation</p><p> $$E=mc^2$$</p><p> discovered in 1905 by Albert Einstein.<br> In natural units ($c$ = 1), the formula expresses the identity</p><p> \begin{equation}<br> E=m<br> \end{equation}</p></li></ol>]]></content:encoded>
      
      <comments>http://huyingjie.github.io/blog-hexo-en-yingjiehu/Show-math-formula-in-Jekyll/#disqus_thread</comments>
    </item>
    
    <item>
      <title>How to Uninstall R underMac OS X</title>
      <link>http://huyingjie.github.io/blog-hexo-en-yingjiehu/how-to-uninstall-r-under-mac-os-x/</link>
      <guid>http://huyingjie.github.io/blog-hexo-en-yingjiehu/how-to-uninstall-r-under-mac-os-x/</guid>
      <pubDate>Sun, 23 Nov 2014 05:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;When updating R on Mac,  we can uninstall the old version and install the new version. Uninstalling R is very easy on Mac.
      
      </description>
      
      <content:encoded><![CDATA[<p>When updating R on Mac,  we can uninstall the old version and install the new version. Uninstalling R is very easy on Mac. <a id="more"></a></p><p>During installation of R,  at least 2 folders are involved.</p><p><ol><br>    <li><code>/Applications/R.app</code> folder: contains GUI</li><br>    <li> <code><span class="lang:r decode:true crayon-inline">/Library/Frameworks/R.framework</span></code> folder: contains R framework</li><br>    <li> <code>(unkown) <span class="lang:default decode:true crayon-inline ">/usr/bin</span></code> : contains some links</li><br></ol><br>When uninstalling, R under Mac OS X will delete all of them.</p><p>Uninstallation steps as follows:</p><p><ol><br>    <li>open terminal in Mac OS X</li><br>    <li>run <code>rm -rf /Library/Frameworks/R.framework /Applications/R.app \ /usr/bin/R /usr/bin/Rscript</code></li><br></ol><br>Done!</p><p>Reference: <a href="http://cran.r-project.org/doc/manuals/r-release/R-admin.html#Uninstalling-under-OS-X" target="_blank" rel="noopener">http://cran.r-project.org/doc/manuals/r-release/R-admin.html#Uninstalling-under-OS-X</a></p>]]></content:encoded>
      
      <comments>http://huyingjie.github.io/blog-hexo-en-yingjiehu/how-to-uninstall-r-under-mac-os-x/#disqus_thread</comments>
    </item>
    
    <item>
      <title>It is a correct choice to buy Mac Pro!</title>
      <link>http://huyingjie.github.io/blog-hexo-en-yingjiehu/its-a-correct-choice-to-buy-mac-pro/</link>
      <guid>http://huyingjie.github.io/blog-hexo-en-yingjiehu/its-a-correct-choice-to-buy-mac-pro/</guid>
      <pubDate>Wed, 03 Apr 2013 04:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;I usually saw some tutorials in youtube about how to use softwares. There is a high probability that people in the video used Mac to teach how to program. In the past, I feel doubt that why it happened. Last year, in the thanksgiving’s shopping season ($150 off), I decided to buy 13 inch,  not too big and heavy, not too small. In the store, it was easy for me to confuse which one to buy, Mac Pro or Mac Air. The employee in the NYU Mac store said price performance ratio was better. She recommended that  it was better to buy Mac Air if Mac was my secondary computer. Finally, I made the decision to buy &lt;a title=&quot;Mac pro 13 inch&quot; href=&quot;http://links.yingjiehu.com/Apple13pro&quot; target=&quot;_blank&quot;&gt;Mac Pro 13 inch&lt;/a&gt; because its CPU was better than Mac Air and storage was bigger.
      
      </description>
      
      <content:encoded><![CDATA[<p>I usually saw some tutorials in youtube about how to use softwares. There is a high probability that people in the video used Mac to teach how to program. In the past, I feel doubt that why it happened. Last year, in the thanksgiving’s shopping season ($150 off), I decided to buy 13 inch,  not too big and heavy, not too small. In the store, it was easy for me to confuse which one to buy, Mac Pro or Mac Air. The employee in the NYU Mac store said price performance ratio was better. She recommended that  it was better to buy Mac Air if Mac was my secondary computer. Finally, I made the decision to buy <a title="Mac pro 13 inch" href="http://links.yingjiehu.com/Apple13pro" target="_blank">Mac Pro 13 inch</a> because its CPU was better than Mac Air and storage was bigger. <a id="more"></a></p><p>Last week, my experience told me that it is one of the most valuable items purchased last year. I did one problem about kernel smoothing method and used guassian kernel. The training data set was big with over 7000 observations and 56 predictors. All the predictors had to be used to generate guassian kernals for each observation in test data. Then I programmed the process to create guassian kernals. For each test data, it took about 3 minutes to generate the wights. I felt it was too slow then run the same program in Lenovo Thinkpad T420. It cost third times time. One of my classmates used Mac Air to program, she could not know when the program would stop but the same program was run in Mac Pro in several seconds. Big difference!</p><p>A computer with faster CPU is very important.</p><p>It recalled me the time last semester. A lot of programming were required for bayesian class. Some programs were slow. If I used Mac Pro at that time, less time would be put in my homework and I did not need to stay up every week!</p>]]></content:encoded>
      
      <comments>http://huyingjie.github.io/blog-hexo-en-yingjiehu/its-a-correct-choice-to-buy-mac-pro/#disqus_thread</comments>
    </item>
    
    <item>
      <title>How long to write a book?</title>
      <link>http://huyingjie.github.io/blog-hexo-en-yingjiehu/How-long-to-write-a-book/</link>
      <guid>http://huyingjie.github.io/blog-hexo-en-yingjiehu/How-long-to-write-a-book/</guid>
      <pubDate>Sun, 31 Mar 2013 04:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;How long to write a book? No correct answer to this question. My sensibility always admire people who can write the book as quickly as possible because the speed implies that they have high productivity and other abilities. My intellects know my sensibility is wrong. How to marry intellects and sensibility? I do not have answer to this question, either. One thing can be confirmed that good books take time. How long? Several years.
      
      </description>
      
      <content:encoded><![CDATA[<p>How long to write a book? No correct answer to this question. My sensibility always admire people who can write the book as quickly as possible because the speed implies that they have high productivity and other abilities. My intellects know my sensibility is wrong. How to marry intellects and sensibility? I do not have answer to this question, either. One thing can be confirmed that good books take time. How long? Several years. <a id="more"></a></p><p><a href="http://blog.ericnovik.com/2013/03/28/getting-ready-to-write-a-book/" target="_blank">Eric Novik planned to write a book recently</a>, 8 chapter and over 300 pages. He asked Prof. Gelman:</p><blockquote>The work seems overwhelming. I always wondered how you manage to produce such high volume of high quality content. What’s the secret?</blockquote><br><a href="http://andrewgelman.com/2013/03/31/hes-getting-ready-to-write-a-book/" target="_blank">Prof. Gelman replied in his blog:</a><br><blockquote>The first secret is, I wouldn’t try to write a book in 6 to 8 months. The first edition of Bayesian Data Analysis took several years. Each new edition took awhile too. So if “long and arduous” to you means “6 to 8 months,” I think your time management skills are already much better than mine!</blockquote>]]></content:encoded>
      
      <comments>http://huyingjie.github.io/blog-hexo-en-yingjiehu/How-long-to-write-a-book/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
